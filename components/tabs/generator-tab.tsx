"use client"

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Slider } from "@/components/ui/slider"
import { Switch } from "@/components/ui/switch"
import { Badge } from "@/components/ui/badge"
import { Textarea } from "@/components/ui/textarea"
import { useToast } from "@/hooks/use-toast"
import { useMetaStore } from "@/store/meta-store"
import { useLyricsStore } from "@/store/lyrics-store"
import { useHistoryStore } from "@/store/history-store"
import { STYLE_PRESETS } from "@/store/presets"
import { buildStyle } from "@/lib/buildStyle"
import { Music, Settings, Zap, Save, History } from "lucide-react"
import { useState, useEffect, useCallback } from "react"

export function GeneratorTab() {
  const { toast } = useToast()
  const {
    bpm,
    key,
    vocal,
    era,
    mood,
    stylePercentage,
    weirdnessPercentage,
    acapellaOnly,
    noInstruments,
    dryVocals,
    introWithoutKick,
    referenceArtists,
    presetId,
    style,
    setBpm,
    setKey,
    setVocal,
    setEra,
    setMood,
    setStylePercentage,
    setWeirdnessPercentage,
    setAcapellaOnly,
    setNoInstruments,
    setDryVocals,
    setIntroWithoutKick,
    setStyle,
    saveToHistory,
  } = useMetaStore()

  const { sections, formatLyricsForExport } = useLyricsStore()
  const { addEntry } = useHistoryStore()

  const [styleText, setStyleText] = useState(style || "")
  const [isAutoGenerated, setIsAutoGenerated] = useState(true)
  const [lastSavedHash, setLastSavedHash] = useState("")

  const currentPreset = STYLE_PRESETS.find((p) => p.id === presetId)

  const generateAutoStyle = useCallback(() => {
    if (!isAutoGenerated) return

    const autoStyle = buildStyle(
      {
        bpm,
        key,
        vocal,
        era,
        mood,
        stylePct: stylePercentage,
        weirdPct: weirdnessPercentage,
        toggles: {
          introNoKick: introWithoutKick,
          acapellaOnly,
          noInstruments,
          dryVocals,
        },
        referenceArtists,
      },
      currentPreset,
    )

    setStyleText(autoStyle)
    setStyle(autoStyle)
  }, [
    bpm,
    key,
    vocal,
    era,
    mood,
    stylePercentage,
    weirdnessPercentage,
    introWithoutKick,
    acapellaOnly,
    noInstruments,
    dryVocals,
    referenceArtists,
    currentPreset,
    isAutoGenerated,
    setStyle,
  ])

  const autoSaveToHistory = useCallback(async () => {
    if (!styleText.trim()) return

    const lyricsText = formatLyricsForExport(sections)
    if (!lyricsText.trim()) return

    const currentHash = btoa(`${styleText}${lyricsText}`).slice(0, 8)
    if (currentHash === lastSavedHash) return

    try {
      await saveToHistory(lyricsText)
      setLastSavedHash(currentHash)
    } catch (error) {
      console.error("Auto-save failed:", error)
    }
  }, [styleText, sections, formatLyricsForExport, saveToHistory, lastSavedHash])

  useEffect(() => {
    const timer = setTimeout(generateAutoStyle, 300)
    return () => clearTimeout(timer)
  }, [generateAutoStyle])

  useEffect(() => {
    const timer = setTimeout(autoSaveToHistory, 2000)
    return () => clearTimeout(timer)
  }, [autoSaveToHistory])

  useEffect(() => {
    if (style && style !== styleText) {
      setStyleText(style)
    }
  }, [style])

  const handleStyleChange = (value: string) => {
    setStyleText(value)
    setStyle(value)
    setIsAutoGenerated(false)
  }

  const handleGeneratePrompt = () => {
    if (!styleText && !currentPreset) {
      const autoStyle = buildStyle({
        bpm,
        key,
        vocal,
        era,
        mood,
        stylePct: stylePercentage,
        weirdPct: weirdnessPercentage,
        toggles: {
          introNoKick: introWithoutKick,
          acapellaOnly,
          noInstruments,
          dryVocals,
        },
        referenceArtists,
      })
      setStyleText(autoStyle)
      setStyle(autoStyle)
      setIsAutoGenerated(true)
    }
  }

  const handleSaveToHistory = async () => {
    if (!styleText.trim()) {
      toast({ title: "No STYLE to save", variant: "destructive" })
      return
    }

    const lyricsText = formatLyricsForExport(sections)
    if (!lyricsText.trim()) {
      toast({ title: "No LYRICS to save", variant: "destructive" })
      return
    }

    try {
      await saveToHistory(lyricsText)
      const currentHash = btoa(`${styleText}${lyricsText}`).slice(0, 8)
      setLastSavedHash(currentHash)
      toast({ title: "Project saved to history" })
    } catch (error) {
      toast({ title: "Failed to save to history", variant: "destructive" })
    }
  }

  return (
    <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
      {/* Suno/Udio Integration */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Music className="w-5 h-5" />
            Suno/Udio Integration
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <Label htmlFor="style-text" className="text-sm font-medium">
              STYLE
            </Label>
            <Textarea
              id="style-text"
              value={styleText}
              onChange={(e) => handleStyleChange(e.target.value)}
              placeholder="Style will be auto-generated based on your settings..."
              className="mt-2 min-h-[100px]"
            />
            {isAutoGenerated && (
              <p className="text-xs text-muted-foreground mt-1">Auto-generated â€¢ Changes with your settings</p>
            )}
          </div>

          {currentPreset && (
            <div>
              <Label className="text-sm font-medium">Active Preset</Label>
              <div className="mt-2 flex items-center gap-2">
                <Badge variant="secondary">{currentPreset.name}</Badge>
                <Badge variant="outline">{currentPreset.bpm} BPM</Badge>
                <Badge variant="outline">{currentPreset.key}</Badge>
              </div>
            </div>
          )}

          <div className="flex gap-2">
            <Button className="flex-1" variant="default" onClick={handleGeneratePrompt}>
              <Zap className="w-4 h-4 mr-2" />
              Generate Prompt
            </Button>
            <Button className="flex-1 bg-transparent" variant="outline">
              <Zap className="w-4 h-4 mr-2" />
              Generate in Udio
            </Button>
          </div>

          <div className="flex gap-2">
            <Button
              onClick={handleSaveToHistory}
              variant="outline"
              className="flex-1 bg-transparent"
              data-testid="save-history"
            >
              <Save className="w-4 h-4 mr-2" />
              Save to History
            </Button>
            <div className="flex items-center text-xs text-muted-foreground">
              <History className="w-3 h-3 mr-1" />
              Auto-saving
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Music Metadata Controls */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Settings className="w-5 h-5" />
            Music Metadata
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <div>
              <Label htmlFor="bpm">BPM</Label>
              <Input
                id="bpm"
                type="number"
                value={bpm}
                onChange={(e) => setBpm(Number(e.target.value))}
                min="80"
                max="200"
              />
            </div>
            <div>
              <Label htmlFor="key">Key</Label>
              <Select value={key} onValueChange={setKey}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="C major">C major</SelectItem>
                  <SelectItem value="D# minor">D# minor</SelectItem>
                  <SelectItem value="A minor">A minor</SelectItem>
                  <SelectItem value="F# minor">F# minor</SelectItem>
                  <SelectItem value="E minor">E minor</SelectItem>
                  <SelectItem value="G major">G major</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div>
              <Label htmlFor="vocal">Vocal</Label>
              <Select value={vocal} onValueChange={setVocal}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="female">Female</SelectItem>
                  <SelectItem value="male">Male</SelectItem>
                  <SelectItem value="duet">Duet</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div>
              <Label htmlFor="era">Era</Label>
              <Select value={era} onValueChange={setEra}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="90s">90s</SelectItem>
                  <SelectItem value="2000s">2000s</SelectItem>
                  <SelectItem value="2003">2003</SelectItem>
                  <SelectItem value="modern">Modern</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          <div>
            <Label htmlFor="mood">Mood</Label>
            <Input
              id="mood"
              value={mood}
              onChange={(e) => setMood(e.target.value)}
              placeholder="euphoric, uplifting, emotional..."
            />
          </div>
        </CardContent>
      </Card>

      {/* Style Controls */}
      <Card>
        <CardHeader>
          <CardTitle>Style Controls</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <Label>Style Percentage: {stylePercentage}%</Label>
            <Slider
              value={[stylePercentage]}
              onValueChange={(value) => setStylePercentage(value[0])}
              max={100}
              step={5}
              className="mt-2"
            />
          </div>

          <div>
            <Label>Weirdness: {weirdnessPercentage}%</Label>
            <Slider
              value={[weirdnessPercentage]}
              onValueChange={(value) => setWeirdnessPercentage(value[0])}
              max={50}
              step={5}
              className="mt-2"
            />
          </div>

          <div className="space-y-3">
            <div className="flex items-center space-x-2">
              <Switch id="introWithoutKick" checked={introWithoutKick} onCheckedChange={setIntroWithoutKick} />
              <Label htmlFor="introWithoutKick">Intro without kick</Label>
            </div>
            <div className="flex items-center space-x-2">
              <Switch id="acapellaOnly" checked={acapellaOnly} onCheckedChange={setAcapellaOnly} />
              <Label htmlFor="acapellaOnly">Acapella only</Label>
            </div>
            <div className="flex items-center space-x-2">
              <Switch id="dryVocals" checked={dryVocals} onCheckedChange={setDryVocals} />
              <Label htmlFor="dryVocals">Dry vocals</Label>
            </div>
            <div className="flex items-center space-x-2">
              <Switch id="noInstruments" checked={noInstruments} onCheckedChange={setNoInstruments} />
              <Label htmlFor="noInstruments">No instruments</Label>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}
